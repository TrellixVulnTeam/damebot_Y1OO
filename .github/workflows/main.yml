# This is a basic workflow to help you get started with Actions

name: Deliver on host

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: GitHub GraphQL API Query
        # You may pin to the exact commit or the version.
        # uses: octokit/graphql-action@5b35793a23d626e7528da63fc3b47a5bc06b628c
        uses: octokit/graphql-action@v2.2.1
        id: get_latest_release
        with:
          query: |
                query release($owner:String!,$repo:String!) {
                  repository(owner:$owner, name:$repo) {
                    latestRelease {
                      name
                      description
                    }
                  }
                }
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Send chat to group
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            curl -v --data-urlencode "group_id=$GROUPNO" --data-urlencode "message=$MSG" "http://127.0.0.1:5700/send_group_msg"
          script_stop: true
          envs: GROUPNO,MSG 
        env:
          GROUPNO: ${{ secrets.NOTIFY_GROUP_ID }}
          MSG: ${{ format('damebot is updating... {0} >> {1}', fromJSON(steps.get_latest_release.outputs.data).repository.latestRelease.name, fromJSON(steps.get_latest_release.outputs.data).repository.latestRelease.description) }}
      - name: Deploy damebot to Host
        uses: up9cloud/action-rsync@v1.1
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          RSYNC_PASSWORD: ${{ secrets.PASSWORD }}
          KEY: ${{ secrets.KEY }}
          TARGET: "/home/${{ secrets.USER }}/app-damebot"
          VERBOSE: true
          # PORT: 2222 # no need to set this, because of $SSH_ARGS
          ARGS: --delete
          SOURCE: "."
          PRE_SCRIPT: |
            echo start at:
            date -u
          POST_SCRIPT: "echo done at: && date -u"
      - name: Start up damebot service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            cd app-damebot
            docker-compose up -d --build
          script_stop: true
      - name: Send chat to group
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
               curl -v --data-urlencode "group_id=$GROUPNO" --data-urlencode "message=$MSG" "http://127.0.0.1:5700/send_group_msg"
          script_stop: true
          envs: GROUPNO,MSG
        env:
          GROUPNO: ${{ secrets.NOTIFY_GROUP_ID }}
          MSG: ${{ format('damebot updated! {0} >> {1}', fromJSON(steps.get_latest_release.outputs.data).repository.latestRelease.name, fromJSON(steps.get_latest_release.outputs.data).repository.latestRelease.description) }}
  
            
